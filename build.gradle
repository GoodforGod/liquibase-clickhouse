plugins {
    id "jacoco"
    id "maven-publish"
    id "java-library"

    id "org.sonarqube" version "5.1.0.4882"
    id "com.diffplug.spotless" version "6.19.0"
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

group = groupId
var ver = System.getenv().getOrDefault("RELEASE_VERSION", artifactVersion)
version = ver.startsWith("v") ? ver.substring(1) : ver

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

dependencies {
    compileOnly "com.clickhouse:clickhouse-jdbc:0.7.0"
    compileOnly("com.clickhouse:clickhouse-http-client") {
        version {
            strictly "0.7.0"
        }
    }

    api "org.liquibase:liquibase-core:4.29.2"

    implementation "org.lz4:lz4-java:1.8.0"
    implementation "com.typesafe:config:1.4.3"
    implementation "org.apache.httpcomponents.client5:httpclient5:5.3.1"

    testImplementation "org.testcontainers:clickhouse:1.19.8"
    testRuntimeOnly "ch.qos.logback:logback-classic:1.5.0"
    testRuntimeOnly "com.clickhouse:clickhouse-jdbc:0.7.0"
    testRuntimeOnly("com.clickhouse:clickhouse-http-client") {
        version {
            strictly "0.7.0"
        }
    }

    testImplementation "org.testcontainers:junit-jupiter:1.19.8"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.1"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.9.1"
}

test {
    failFast(false)
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
        exceptionFormat("full")
        showStandardStreams(false)
    }

    reports {
        html.required = false
        junitXml.required = true
    }
}

spotless {
    java {
        encoding("UTF-8")
        importOrder()
        removeUnusedImports()
        eclipse("4.21.0").configFile("${rootDir}/config/codestyle.xml")
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "goodforgod"
        property "sonar.projectKey", "GoodforGod_$artifactId"
    }
}

nexusPublishing {
    packageGroup = groupId
    repositories {
        sonatype {
            username = System.getenv("OSS_USERNAME")
            password = System.getenv("OSS_PASSWORD")
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = "Liquibase ClickHouse"
                url = "https://github.com/GoodforGod/$artifactId"
                description = "Liquibase extension for the ClickHouse"

                license {
                    name = "MIT License"
                    url = "https://github.com/GoodforGod/$artifactId/blob/master/LICENSE"
                    distribution = "repo"
                }

                developer {
                    id = "GoodforGod"
                    name = "Anton Kurako"
                    email = "goodforgod.dev@gmail.com"
                    url = "https://github.com/GoodforGod"
                }

                scm {
                    connection = "scm:git:git://github.com/GoodforGod/${artifactId}.git"
                    developerConnection = "scm:git:ssh://GoodforGod/${artifactId}.git"
                    url = "https://github.com/GoodforGod/$artifactId/tree/master"
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getenv("OSS_USERNAME")
                password System.getenv("OSS_PASSWORD")
            }
        }
        if (!version.endsWith("SNAPSHOT")) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/GoodforGod/$artifactId"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile) {
    options.encoding("UTF-8")
    options.incremental(true)
    options.fork = false
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.required = true
        html.destination(file("${buildDir}/jacocoHtml"))
    }
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

if (project.hasProperty("signingKey")) {
    apply plugin: "signing"
    signing {
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}